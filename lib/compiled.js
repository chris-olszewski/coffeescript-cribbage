// Generated by CoffeeScript 1.7.1
(function() {
  var Card, Cribbage,
    __slice = [].slice;

  Card = (function() {
    function Card(suit, number) {
      if ((1 <= number && number <= 13)) {
        this.number = number;
      }
      if (suit === 'd' || suit === 'h' || suit === 's' || suit === 'c') {
        this.suit = suit;
      }
      if (!(number > 10)) {
        this.val = number;
      }
      this.val || (this.val = 10);
    }

    Card.prototype.suit_name = function() {
      switch (this.suit) {
        case 'd':
          return 'Diamonds';
        case 'h':
          return 'Hearts';
        case 's':
          return 'Spades';
        case 'c':
          return 'Clubs';
      }
    };

    Card.prototype.number_char = function() {
      switch (this.number) {
        case 1:
          return "A";
        case 11:
          return "J";
        case 12:
          return "Q";
        case 13:
          return "K";
        default:
          return this.number.toString();
      }
    };

    Card.prototype.name = function() {
      return "" + (this.number_char()) + " of " + (this.suit_name());
    };

    return Card;

  })();

  if (typeof module !== "undefined" && module.exports) {
    module.exports = Card;
  } else {
    window.Card = Card;
  }

  Cribbage = (function() {
    function Cribbage() {}

    Cribbage.points = function(cards) {
      var total;
      total = 0;
      total += this._pairs(cards);
      total += this._fifteen(cards);
      return total += this._knobs(cards);
    };

    Cribbage._pairs = function(cards) {
      var card, cards_copy, temp, total, _i, _len, _ref;
      total = 0;
      cards_copy = cards;
      _ref = cards_copy.unique();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        card = _ref[_i];
        temp = cards.filter(function(x) {
          return x.number === card.number;
        });
        switch (temp.length) {
          case 2:
            total += 2;
            break;
          case 3:
            total += 6;
            break;
          case 4:
            total += 12;
            break;
          default:
            total += 0;
        }
      }
      return total;
    };

    Cribbage._runs = function(cards) {
      var sorted, total;
      total = 0;
      return sorted = cards.sort(function(a, b) {
        if (a.number <= b.number) {
          return 1;
        } else {
          return -1;
        }
      });
    };

    Cribbage._fifteen = function(cards) {
      var card, card2, combo, combos, _i, _j, _len, _len1;
      combos = [];
      for (_i = 0, _len = cards.length; _i < _len; _i++) {
        card = cards[_i];
        combo = [card];
        for (_j = 0, _len1 = cards.length; _j < _len1; _j++) {
          card2 = cards[_j];
          if (combo.reduce(function(x, y) {
            return x.val + y.val <= 15 - card2.val;
          })) {
            combo.push(card2);
          }
        }
        if (combo.reduce(function(x, y) {
          return x.val + y.val === 15;
        })) {
          combos.push(combo);
        }
      }
      console.log(combos);
      return combos.length * 2;
    };

    Cribbage._knobs = function(cards) {
      var card, flipped, hand, _i;
      hand = 2 <= cards.length ? __slice.call(cards, 0, _i = cards.length - 1) : (_i = 0, []), flipped = cards[_i++];
      if (((function() {
        var _j, _len, _results;
        _results = [];
        for (_j = 0, _len = hand.length; _j < _len; _j++) {
          card = hand[_j];
          if (card.number === 11 && card.suit === flipped.suit) {
            _results.push(card);
          }
        }
        return _results;
      })()).length > 0) {
        return 1;
      } else {
        return 0;
      }
    };

    Cribbage._flush = function(cards) {
      var points, _ref, _ref1;
      points = 0;
      if (((cards[0].suit === (_ref1 = cards[1].suit) && _ref1 === (_ref = cards[2].suit)) && _ref === cards[3].suit)) {
        points += 4;
      }
      if (cards.length === 5 && cards[0].suit === cards[4].suit) {
        points++;
      }
      return points;
    };

    return Cribbage;

  })();

  if (typeof module !== "undefined" && module.exports) {
    module.exports = Cribbage;
  } else {
    window.Cribbage = Cribbage;
  }

  Array.prototype.filter = function(callback) {
    var element, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      element = this[_i];
      if (callback(element)) {
        _results.push(element);
      }
    }
    return _results;
  };

  Array.prototype.unique = function() {
    var key, output, value, _i, _ref, _results;
    output = {};
    for (key = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; key = 0 <= _ref ? ++_i : --_i) {
      output[this[key]] = this[key];
    }
    _results = [];
    for (key in output) {
      value = output[key];
      _results.push(value);
    }
    return _results;
  };

  if (typeof module !== "undefined" && module.exports) {
    module.exports = Array;
  }

  if (typeof module !== "undefined" && module.exports) {
    Card = require('card.coffee');
  } else {
    Card = window.Card;
  }

  window.Deck = (function() {
    function Deck() {
      var num, suit, _i, _j, _len, _ref;
      this.cards = [];
      _ref = ['d', 'h', 's', 'c'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        suit = _ref[_i];
        for (num = _j = 1; _j <= 13; num = ++_j) {
          this.cards.push(new Card(suit, num));
        }
      }
      this.shuffle();
    }

    Deck.prototype.shuffle = function() {
      var i, j, _i, _ref, _ref1, _results;
      _results = [];
      for (i = _i = _ref = this.cards.length - 1; _ref <= 1 ? _i <= 1 : _i >= 1; i = _ref <= 1 ? ++_i : --_i) {
        j = Math.floor(Math.random() * (i + 1));
        _results.push((_ref1 = [this.cards[j], this.cards[i]], this.cards[i] = _ref1[0], this.cards[j] = _ref1[1], _ref1));
      }
      return _results;
    };

    Deck.prototype.draw = function() {
      var card;
      card = this.cards[0];
      this.cards.splice(0, 1);
      return card;
    };

    return Deck;

  })();

  if (typeof module !== "undefined" && module.exports) {
    module.exports = Deck;
  } else {
    window.Deck = Deck;
  }

}).call(this);
